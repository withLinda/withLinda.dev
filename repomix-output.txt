This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-08T14:31:46.487Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Directory Structure
================================================================
.gitignore
astro.config.mjs
package.json
postcss.config.js
public/favicon.svg
README.md
src/components/BaseHead.astro
src/components/Body.astro
src/components/Content.astro
src/components/CopyCodeButton.astro
src/components/Footer.astro
src/components/Header.astro
src/components/HeaderLink.astro
src/components/MobileMenu.tsx
src/components/ThemeScript.astro
src/components/ThemeToggleButton.tsx
src/config.ts
src/env.d.ts
src/layouts/BlogPost.astro
src/pages/about.md
src/pages/index.astro
src/pages/posts/foundation-cache-saved/lorem-ipsum-1.md
src/pages/posts/foundation-cache-saved/my-personal-git-github-cheatsheet.md
src/pages/posts/foundation-cache-saved/my-personal-rules-for-AI-IDE.mdx
src/pages/posts/lorem-ipsum/hello-world.md
src/styles/global.css
src/styles/theme.ts
tailwind.config.cjs
tsconfig.json

================================================================
Files
================================================================

================
File: .gitignore
================
# build output
dist/
# generated types
.astro/

# dependencies
node_modules/

# logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*


# environment variables
.env
.env.production

# macOS-specific files
.DS_Store

# jetbrains setting folder
.idea/

================
File: astro.config.mjs
================
// @ts-check
import { defineConfig } from 'astro/config';

import react from '@astrojs/react';
import tailwind from '@astrojs/tailwind';
import sitemap from '@astrojs/sitemap';
import mdx from '@astrojs/mdx';

// https://astro.build/config
export default defineConfig({
  site: 'https://your-site.com/',
  integrations: [react(), tailwind(), sitemap(), mdx()]
});

================
File: package.json
================
{
  "name": "",
  "type": "module",
  "version": "0.0.1",
  "scripts": {
    "dev": "astro dev",
    "start": "astro dev",
    "build": "astro check && astro build",
    "preview": "astro preview",
    "astro": "astro"
  },
  "dependencies": {
    "@astrojs/check": "^0.9.4",
    "@astrojs/mdx": "^4.0.3",
    "@astrojs/react": "^3.6.2",
    "@astrojs/sitemap": "^3.2.1",
    "@astrojs/tailwind": "^5.1.2",
    "@kotosha/astro-gist": "^1.0.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "astro": "^5.1.3",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-icons": "^5.3.0",
    "typescript": "^5.6.3"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.15",
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.48",
    "prettier": "^3.3.3",
    "prettier-plugin-astro": "^0.14.1",
    "tailwindcss": "^3.4.14"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  }
}

================
File: public/favicon.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 128 128">
    <path d="M50.4 78.5a75.1 75.1 0 0 0-28.5 6.9l24.2-65.7c.7-2 1.9-3.2 3.4-3.2h29c1.5 0 2.7 1.2 3.4 3.2l24.2 65.7s-11.6-7-28.5-7L67 45.5c-.4-1.7-1.6-2.8-2.9-2.8-1.3 0-2.5 1.1-2.9 2.7L50.4 78.5Zm-1.1 28.2Zm-4.2-20.2c-2 6.6-.6 15.8 4.2 20.2a17.5 17.5 0 0 1 .2-.7 5.5 5.5 0 0 1 5.7-4.5c2.8.1 4.3 1.5 4.7 4.7.2 1.1.2 2.3.2 3.5v.4c0 2.7.7 5.2 2.2 7.4a13 13 0 0 0 5.7 4.9v-.3l-.2-.3c-1.8-5.6-.5-9.5 4.4-12.8l1.5-1a73 73 0 0 0 3.2-2.2 16 16 0 0 0 6.8-11.4c.3-2 .1-4-.6-6l-.8.6-1.6 1a37 37 0 0 1-22.4 2.7c-5-.7-9.7-2-13.2-6.2Z" />
    <style>
        path { fill: #000; }
        @media (prefers-color-scheme: dark) {
            path { fill: #FFF; }
        }
    </style>
</svg>

================
File: README.md
================
# Composer Astro React Tailwind

A modern blog template built with Astro, React, and Tailwind CSS. This template provides a fast, SEO-friendly blog platform with a beautiful design and dark mode support.

## ✨ Features

- ⚡️ **Blazing Fast** - Built with Astro for optimal performance
- 🎨 **Beautiful Design** - Styled with Tailwind CSS
- 🌙 **Dark Mode** - Seamless theme switching
- ⚛️ **React Components** - Interactive UI elements with React
- 📱 **Fully Responsive** - Mobile-first design approach
- 🔍 **SEO Optimized** - Built-in sitemap and meta tags
- 🔒 **TypeScript** - Type-safe code
- 📝 **Markdown Support** - Write blog posts in Markdown
- 🎯 **Zero JS by default** - No JavaScript runtime overhead

## 🚀 Tech Stack

- [Astro](https://astro.build) - Static Site Generator
- [React](https://reactjs.org) - UI Components
- [Tailwind CSS](https://tailwindcss.com) - Styling
- [TypeScript](https://www.typescriptlang.org) - Type Safety
- [React Icons](https://react-icons.github.io/react-icons) - Icons

## 📦 Project Structure

```
/
├── public/          # Static assets
│   └── fonts/      # Custom fonts
├── src/
│   ├── components/ # UI Components
│   ├── layouts/    # Page layouts
│   ├── pages/      # Page routes
│   └── styles/     # Global styles
└── package.json
```

## 🛠️ Getting Started

1. Clone the repository:
```bash
git clone [your-repo-url]
cd composer-astro-react-tailwind
```

2. Install dependencies:
```bash
npm install
```

3. Start the development server:
```bash
npm run dev
```

Visit `http://localhost:4321` to see your site!

## 📝 Available Commands

| Command           | Action                                       |
|:-----------------|:---------------------------------------------|
| `npm install`     | Install project dependencies                 |
| `npm run dev`     | Start development server at `localhost:4321` |
| `npm run build`   | Build production site to `./dist/`          |
| `npm run preview` | Preview production build locally             |
| `npm run astro`   | Run Astro CLI commands                      |

## 🎨 Customization

- **Styling**: Edit `tailwind.config.cjs` to customize your design tokens
- **Components**: Add React components in `src/components`
- **Pages**: Add new pages in `src/pages` directory
- **Blog Posts**: Add markdown files in `src/pages/posts`
- **Fonts**: Add custom fonts in `public/fonts`

## 🔑 Environment Variables

Create a `.env` file in the root directory:

```env
PUBLIC_SITE_URL=your-site-url
```

## 📄 License

This project is licensed under the MIT License.

================
File: src/components/BaseHead.astro
================
---
import '../styles/global.css'
import ThemeScript from './ThemeScript.astro'

export interface Props {
  title: string
  description: string
  image?: string
}

const { title, description, image = '/cover.jpg' } = Astro.props
---
<!-- Theme Script must be the first thing in head -->
<ThemeScript />

<!-- Basic meta tags -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>{title}</title>
<meta name="description" content={description} />

================
File: src/components/Body.astro
================
<body
  class="bg-solarized-bg dark:bg-nightowl-bg text-solarized-fg dark:text-nightowl-fg break-words leading-6 transition-colors duration-500"
>
  <slot />
</body>

================
File: src/components/Content.astro
================
---
export interface Props {
  className?: string
}

const { className = '' } = Astro.props
---
<article class={`px-8 pt-24 mx-auto max-w-3xl ${className}`}>
  <slot />
</article>

================
File: src/components/CopyCodeButton.astro
================
---
---
<script>
  const copyButtonLabel = "Copy";
  const copiedButtonLabel = "Copied!";

  const codeBlocks = Array.from(document.querySelectorAll('pre'));

  for (let codeBlock of codeBlocks) {
    const wrapper = document.createElement('div');
    wrapper.classList.add('code-block-wrapper');

    const copyButton = document.createElement('button');
    copyButton.classList.add('copy-code-button');
    copyButton.innerHTML = copyButtonLabel;

    // Wrap code block with relative parent element
    const parent = codeBlock.parentNode;
    if (parent) {
      parent.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);
      wrapper.appendChild(copyButton);
    }

    copyButton.addEventListener('click', async () => {
      await copyCode(codeBlock, copyButton);
    });
  }

  async function copyCode(block: HTMLPreElement, button: HTMLButtonElement) {
    const code = block.querySelector('code');
    const text = code?.innerText || '';
    
    try {
      await navigator.clipboard.writeText(text);
      button.innerHTML = copiedButtonLabel;
      
      setTimeout(() => {
        button.innerHTML = copyButtonLabel;
      }, 700);
    } catch (err) {
      console.error('Failed to copy code:', err);
    }
  }
</script>

<style>
  /* These styles will be scoped to this component */
  :global(.code-block-wrapper) {
    position: relative;
  }

  :global(.copy-code-button) {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
    line-height: 1.25rem;
    font-weight: 500;
    color: var(--copy-button-fg);
    background-color: var(--copy-button-bg);
    border: 1px solid var(--copy-button-border);
    border-radius: 0.375rem;
    opacity: 0.75;
    transition: opacity 200ms, background-color 200ms;
  }

  :global(.copy-code-button:hover) {
    opacity: 1;
    background-color: var(--copy-button-hover-bg);
  }

  /* Add CSS variables to support both themes */
  :global(:root) {
    --copy-button-fg: theme(colors.solarized.fg);
    --copy-button-bg: theme(colors.solarized.button);
    --copy-button-border: theme(colors.solarized.border);
    --copy-button-hover-bg: theme(colors.solarized.active);
  }

  :global(.dark) {
    --copy-button-fg: theme(colors.nightowl.fg);
    --copy-button-bg: theme(colors.nightowl.button);
    --copy-button-border: theme(colors.nightowl.border);
    --copy-button-hover-bg: theme(colors.nightowl.active);
  }
</style>

================
File: src/components/Footer.astro
================
---
import { ABOUT_URL } from '../config.ts'

const today = new Date()
---

<footer class="text-zinc-500 p-4 text-center">
  &copy; {today.getFullYear()}
  <a href="/" class="hover:underline">withLinda.dev</a>. 
</footer>

================
File: src/components/Header.astro
================
---
import HeaderLink from './HeaderLink.astro'
import ThemeToggleButton from './ThemeToggleButton'
import { ABOUT_URL, SITE_TITLE } from '../config'
import { IoLogoGithub, IoMenu, IoClose } from 'react-icons/io5'
import MobileMenu from './MobileMenu'
---

<header class="fixed w-full p-2 z-20 bg-solarized-bg/60 dark:bg-nightowl-bg/60 backdrop-blur-lg">
  <div class="mx-auto max-w-3xl">
    <nav class="flex items-center gap-3 text-base">
      {/* Site Title/Home Link */}
      <a href="/" class="group">
        <h2 class="font-semibold tracking-wide p-2 text-lg">
          {SITE_TITLE}
        </h2>
      </a>

      {/* Desktop Navigation Links */}
      <div class="items-center gap-6 hidden md:flex">
        <HeaderLink href={ABOUT_URL}>About</HeaderLink>
        <HeaderLink 
          href="https://github.com/yourusername/yourrepo" 
          target="_blank"
        >
          <IoLogoGithub />Source
        </HeaderLink>
      </div>

      {/* Right-side items */}
      <div class="flex-1"></div>
      <ThemeToggleButton client:visible />
      
      {/* Mobile Menu Button */}
      <div class="md:hidden">
        <MobileMenu client:visible>
          <HeaderLink href={ABOUT_URL}>About</HeaderLink>
          <HeaderLink 
            href="https://github.com/yourusername/yourrepo" 
            target="_blank"
          >
            <IoLogoGithub />Source
          </HeaderLink>
        </MobileMenu>
      </div>
    </nav>
  </div>
</header>

================
File: src/components/HeaderLink.astro
================
---
export interface Props extends astroHTML.JSX.AnchorHTMLAttributes {}

const { href, class: className, ...props } = Astro.props
const isActive = href === Astro.url.pathname.replace(/\/$/, '')
---

<a 
  href={href} 
  class:list={[className, { active: isActive }]} 
  {...props}
>
  <slot />
</a>

<style>
  a {
    display: inline-flex;
    text-decoration: none;
    align-items: center;
    gap: 4px;
  }
  a.active {
    font-weight: bolder;
    text-decoration: underline;
  }
</style>

================
File: src/components/MobileMenu.tsx
================
import React, { useState } from "react";
import { IoMenu, IoClose } from "react-icons/io5";

interface Props {
  children: React.ReactNode;
}

export default function MobileMenu({ children }: Props) {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div>
      {/* Hamburger Button */}
      <button
        type="button"
        className="p-2 text-2xl text-solarized-fg dark:text-nightowl-fg hover:bg-solarized-button dark:hover:bg-nightowl-button rounded-lg transition-colors"
        onClick={() => setIsOpen(!isOpen)}
        aria-label="Toggle menu"
      >
        {isOpen ? <IoClose /> : <IoMenu />}
      </button>

      {/* Mobile Menu Panel */}
      {isOpen && (
        <div className="absolute right-0 top-[100%] w-48 py-2 px-4 bg-solarized-bg dark:bg-nightowl-bg border border-solarized-border dark:border-nightowl-border rounded-lg shadow-lg">
          <div className="flex flex-col gap-4 text-solarized-fg dark:text-nightowl-fg">
            {children}
          </div>
        </div>
      )}
    </div>
  );
}

================
File: src/components/ThemeScript.astro
================
---
---
<script is:inline>
  const theme = (() => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  })();

  if (theme === 'light') {
    document.documentElement.classList.remove('dark');
  } else {
    document.documentElement.classList.add('dark');
  }

  window.localStorage.setItem('theme', theme);

  // Remove no-flash class to show content
  document.documentElement.classList.remove('no-flash');
</script>

================
File: src/components/ThemeToggleButton.tsx
================
import React, { useEffect, useState } from "react";
import { IoSunny, IoMoon } from "react-icons/io5";

const themes = ["light", "dark"];

export default function ThemeToggleButton() {
  const [isMounted, setIsMounted] = useState(false);
  const [theme, setTheme] = useState(() => {
    if (import.meta.env.SSR) {
      return undefined;
    }
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  });

  const toggleTheme = () => {
    const t = theme === "light" ? "dark" : "light";
    localStorage.setItem("theme", t);
    setTheme(t);
  };

  useEffect(() => {
    const root = document.documentElement;
    if (theme === "light") {
      root.classList.remove("dark");
    } else {
      root.classList.add("dark");
    }
  }, [theme]);

  useEffect(() => {
    setIsMounted(true);
  }, []);

  return isMounted ? (
    <div className="inline-flex items-center p-[1px] rounded-3xl bg-solarized-button dark:bg-nightowl-button">
      {themes.map((t) => {
        const checked = t === theme;
        return (
          <button
            key={t}
            className={`${
              checked
                ? "bg-solarized-bg dark:bg-nightowl-bg text-solarized-fg dark:text-nightowl-fg"
                : ""
            } cursor-pointer rounded-3xl p-2`}
            onClick={toggleTheme}
            aria-label="Toggle theme"
          >
            {t === "light" ? (
              <IoSunny className="text-solarized-yellow dark:text-nightowl-yellow" />
            ) : (
              <IoMoon className="text-[#2b6cb0] dark:text-nightowl-blue" />
            )}
          </button>
        );
      })}
    </div>
  ) : (
    <div />
  );
}

================
File: src/config.ts
================
export const SITE_TITLE: string = 'withLinda.dev'
export const SITE_DESCRIPTION: string = 'Site Description'
export const ABOUT_URL: string = '/about'

================
File: src/env.d.ts
================
/// <reference path="../.astro/types.d.ts" />
/// <reference types="astro/client" />

// Shared types (create as src/types.ts)
export interface Post {
  title: string
  description: string
  createdAt?: string
  updatedAt?: string
  heroImage?: string
  tags: string[]
}

export interface SiteConfig {
  SITE_TITLE: string
  SITE_DESCRIPTION: string
  ABOUT_URL: string
}

================
File: src/layouts/BlogPost.astro
================
---
import BaseHead from '../components/BaseHead.astro'
import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'
import Body from '../components/Body.astro'
import Content from '../components/Content.astro'
import CopyCodeButton from '../components/CopyCodeButton.astro'
import { SITE_TITLE } from '../config'

export interface Props {
  content: {
    title: string
    description: string
    heroImage?: string
  }
}

const {
  content: { title, description, heroImage }
} = Astro.props
---

<!DOCTYPE html>
<html lang="en" class="no-flash">
  <head>
    <BaseHead title={`${title} | ${SITE_TITLE}`} description={description} image={heroImage} />
  </head>
  <Body>
    <Header />
    <Content>
      <div class="prose">
        <slot />
      </div>
    </Content>
    <Footer />
    <CopyCodeButton />
  </Body>
</html>

================
File: src/pages/about.md
================
---
layout: ../layouts/BlogPost.astro
title: "About Me"
description: "A little bit about me and what I do"
updatedDate: "2024-03-21"
---

# About Me

Hello! I'm Linda, a freelancer at Upwork, based in Indonesia. My experience is in frontend development, web scraping, and automation. I always have a side project and am learning to have the courage to publish a SaaS. In my free time, I play Fallout 76, read books, and play with my two cats.

## What I Do

My experience is in building modern web applications using technologies like:

- Astro
- React
- TypeScript
- Tailwind CSS

And for scraping and automation, I use:

- Python Requests
- Playwright
- Scrapy
- BeautifulSoup

## Get in Touch

Feel free to reach out to me through:

- [GitHub](https://github.com/withLinda)
- [Twitter/X](https://x.com/withLinda13) you can DM me here
- [Tumblr](https://www.tumblr.com/withlinda13)

## About This Site

This site is built with [Astro](https://astro.build), a modern static site generator that allows for building fast, content-focused websites. It features:

- ⚡️ Fast page loads
- 🌙 Dark mode support
- 📱 Responsive design
- 🎨 Tailwind CSS styling

================
File: src/pages/index.astro
================
---
import BaseHead from '../components/BaseHead.astro'
import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'
import Body from '../components/Body.astro'
import Content from '../components/Content.astro'
import { SITE_TITLE, SITE_DESCRIPTION } from '../config'

interface Frontmatter {
  title: string;
  pubDate: string;
}

interface Post {
  file: string;
  url: string;
  frontmatter: Frontmatter;
}

const posts = await Promise.all(
  Object.values(await import.meta.glob<Post>('./posts/**/*.md'))
    .map(async (post) => {
      const postData = await post();
      // Extract category from file path - will be like './posts/category-name/file.md'
      const pathParts = postData.file.split('/posts/')[1].split('/');
      return {
        ...postData,
        category: pathParts.length > 1
          ? pathParts[0]
              .split('-')
              .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1))
              .join(' ')
          : 'Uncategorized',
        date: new Date(postData.frontmatter.pubDate).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'short',
          day: 'numeric'
        })
      }
    })
)

const categories = [...new Set(posts.map(post => post.category))]
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  </head>
  <Body>
    <Header />
    <Content>
      <style>
        .post-list {
          list-style: none;
          padding: 0;
        }
        .category {
          margin: 2rem 0 1rem;
          font-size: 1.1rem;
          font-weight: 500;
          @apply text-solarized-category dark:text-nightowl-category font-semibold;
        }
        .post-item {
          padding: 1rem 0;
          border-bottom: 1px solid #e2e8f0;
          transition: transform 0.2s ease;
        }
        .post-item:hover {
          transform: translateX(8px);
        }
        .post-item:hover .post-date {
          color: #4a5568;
        }
        .post-link {
          display: flex;
          justify-content: space-between;
          align-items: center;
          text-decoration: none;
          color: inherit;
        }
        .post-date {
          font-size: 0.9rem;
          color: #718096;
          transition: color 0.2s ease;
        }
        .post-item:hover {
          border-bottom-color: #cbd5e0;
        }
      </style>
      
      {categories.map(category => (
        <div>
          <h2 class="category">{category}</h2>
          <ul class="post-list">
            {posts
              .filter(post => post.category === category)
              .map(post => (
                <li class="post-item">
                  <a class="post-link" href={post.url}>
                    <span>{post.frontmatter.title}</span>
                    <span class="post-date">{post.date}</span>
                  </a>
                </li>
              ))}
          </ul>
        </div>
      ))}
    </Content>
    <Footer />
  </Body>
</html>

================
File: src/pages/posts/foundation-cache-saved/lorem-ipsum-1.md
================
---
layout: ../../../layouts/BlogPost.astro
title: "The Art of Lorem Ipsum: A Typography Showcase"
description: "A comprehensive demonstration of various typography elements using Lorem Ipsum text, featuring different content styles and formatting"
pubDate: "2025-01-07"
heroImage: "https://images.unsplash.com/photo-1499951360447-b19be8fe80f5?auto=format&fit=crop&q=80"
---

# The Art of Lorem Ipsum

![A modern workspace with laptop and coffee](https://images.unsplash.com/photo-1499951360447-b19be8fe80f5?auto=format&fit=crop&q=80)

## Introduction

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

### The Beauty of Typography

In the world of design and typography, the way text is presented matters as much as the content itself. Here's a quote to ponder:

> Typography is the art and technique of arranging type to make written language legible, readable, and appealing when displayed.
> 
> — *Anonymous Designer*

## Code Examples

Here's how we might style text using CSS:

```css
.elegant-text {
  font-family: 'Raleway', sans-serif;
  font-weight: 400;
  line-height: 1.75;
  color: #2d3748;
}

.quote-block {
  border-left: 4px solid #718096;
  padding-left: 1rem;
  margin: 2rem 0;
}
```

And here's a simple JavaScript function:

```javascript
function generateLoremIpsum(paragraphs) {
  const lorem = "Lorem ipsum dolor sit amet, consectetur adipiscing elit.";
  return Array(paragraphs)
    .fill(lorem)
    .join("\n\n");
}
```

## Features and Benefits

Here are some key points about typography:

- **Readability**: The primary goal of good typography
- **Hierarchy**: Clear visual organization of content
- **Aesthetics**: Beautiful presentation of text
- **Consistency**: Uniform style across the document

### Technical Specifications

1. Font Weights
2. Line Heights
3. Letter Spacing
4. Color Schemes

## Extended Lorem Ipsum

Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

### Subsection Example

Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.

## Conclusion

This post demonstrates various typography elements including:

* Headings (H1, H2, H3)
* Paragraphs
* Blockquotes
* Code blocks
* Lists (ordered and unordered)
* Images
* *Italic text* and **bold text**

---

*Last updated: January 7, 2025*

================
File: src/pages/posts/foundation-cache-saved/my-personal-git-github-cheatsheet.md
================
---
layout: ../../../layouts/BlogPost.astro
title: "My Personal Git & GitHub Cheatsheet (No need to read this)"
description: "Cheatshhet to Git and GitHub commands, workflows, and best practices."
pubDate: "2024-01-19"
heroImage: "https://images.unsplash.com/photo-1618401471353-b98afee0b2eb?auto=format&fit=crop&q=80"
tags: ["git", "github", "development", "tutorial", "cheatsheet"]
readingTime: "15 minutes"
author: "Dev Companion"
---


## 🎯 First Things First: Getting Started
(Because everyone needs to start somewhere, right?)

### 📝 Setting Up Your Identity
```bash
git config --global user.name "Your Awesome Name"
git config --global user.email "your.epic@email.com"
```
> 💡 **Why?** Because Git needs to know who to blame when something goes wrong! (Just kidding... )

## 🌟 The Daily Commands (Your New Best Friends)

### 🔍 Checking Status
```bash
git status
```
> 💡 **When to use:** When you're like "What did I even change?" (Trust me, you'll use this A LOT)

### 📦 Staging Changes
```bash
git add filename.txt    # Stage a specific file
git add .              # Stage everything (YOLO style!)
```
> 💡 **Pro tip:** Think of staging as putting your stuff in a box before shipping. You don't want to accidentally ship your cat! 🐱

### 💾 Committing Changes
```bash
git commit -m "Add awesome new feature"
```
> 💡 **Writing good commit messages:**
> - ❌ "Fixed stuff" (Bad! What stuff?)
> - ❌ "AAAAAAHHHHHHH!" (We've all been there, but no)
> - ✅ "Add user authentication to login page" (Perfect!)

## 🌳 Branching Out (Like a Tree, But Cooler)

## 🌳 Branching and Feature Development Workflow

### 🌿 Creating & Managing Feature Branches
```bash
# Start from main branch
git checkout main

# Create and switch to feature branch (do this before making changes!)
git checkout -b feature/descriptive-name     # Use descriptive names like 'feature/copy-button'

# Work on your changes...
git add .
git commit -m "Add feature description"
git push origin feature/descriptive-name
```
> 💡 **Best Practice:** Always create a new branch for new features - this keeps your main branch clean and stable!

### 🤝 Pull Request Workflow (Even for Personal Projects!)
1. Push your feature branch to GitHub
2. Go to GitHub repository
3. Click "Compare & Pull Request"
4. Write clear title and description
5. Review your own code
6. Merge the pull request
7. Delete the branch after merging

> 💡 **Why PR for personal projects?** 
> - Maintains clean development history
> - Forces code review (even self-review!)
> - Builds good habits for team projects
> - Documents feature additions

### 🧹 Cleaning Up After Merge
```bash
# After PR is merged on GitHub:

# 1. Switch back to main
git checkout main

# 2. Pull the merged changes
git pull origin main

# 3. Delete local feature branch
git branch -d feature/descriptive-name

# 4. Delete remote branch (if not done through GitHub UI)
git push origin --delete feature/descriptive-name
```
> 💡 **Important:** Always pull changes to local main branch after merging on GitHub before deleting branches!

### 🚨 Common Branch Management Warnings

- If you see: "branch 'feature/xyz' not yet merged to HEAD"
  ```bash
  # First sync your local main with GitHub
  git checkout main
  git pull origin main
  # Then try deleting the branch again
  git branch -d feature/xyz
  ```

## 🤝 Playing Nice with Others (Social Git-iquette)

### 📥 Cloning a Repository
```bash
git clone https://github.com/username/repo-name.git
```
> 💡 **What's happening:** You're basically saying "I want a copy of that awesome code, please!"

### 🔄 Pulling Updates
```bash
git pull origin main
```
> 💡 **When to pull:** Before you start working (unless you enjoy fixing merge conflicts 😅)

### 📤 Pushing Changes
```bash
git push origin branch-name
```
> 💡 **Remember:** Push with confidence, but maybe test your code first? Just a thought! 

## 🆘 Oops! (Because We All Make Mistakes)

### 😱 Undoing Last Commit
```bash
git reset --soft HEAD~1    # Undo commit but keep changes
git reset --hard HEAD~1    # Undo commit and delete changes (danger zone!)
```
> 💡 **When to use:** When you accidentally commit your shopping list or passwords (we've all been there)

### 🔄 Reverting Changes in a File
```bash
git checkout -- filename
```
> 💡 **Use case:** When you've been staring at your code for so long that you've made it worse

## 🌟 GitHub Pull Request Workflow (Be a Team Player)

1. Create a branch for your feature
2. Make your changes
3. Push to GitHub
4. Create Pull Request
5. Wait for reviews (maybe make coffee?)
6. Address feedback
7. Get approved
8. Merge and celebrate! 🎉

> 💡 **Pro tip:** Pull Requests are like showing your mom your homework before turning it in - get feedback before it's too late!

## 🎯 Best Practices (The "Please Do This" Section)

1. **Branch Often:** Keep your branches small and focused
   > Like mini-tasks, not your entire todo list!

2. **Commit Regularly:** Small, logical commits are better than one giant commit
   > Think bite-sized pieces, not an entire pizza in one bite

3. **Pull Before Push:** Always pull the latest changes before pushing
   > Avoid the dreaded merge conflicts!

4. **Write Good Commit Messages:** Future you will thank present you
   > Your commit messages tell a story - make it a good one!

5. **Use .gitignore:** Keep your repository clean
   > Nobody needs to see your `node_modules` folder 😉

## 🚫 Common Mistakes to Avoid (Learn from Others' Pain)

1. Committing directly to main branch
   > "Living dangerously" is for action movies, not version control

2. Not pulling before starting new work
   > Unless you enjoy fixing merge conflicts...

3. Pushing sensitive information
   > Your AWS keys don't belong on GitHub (trust me on this one)

4. Not using branches for features
   > Main branch should be like a good TV show - stable and reliable

## 🎉 Final Tips

- When in doubt, `git status` is your friend
- If something scary happens, don't panic - there's usually a way to fix it
- Google and Stack Overflow are perfectly valid Git tools
- Remember: everyone was a beginner once, even Linus Torvalds!

> 💡 **The Most Important Rule:** Don't be afraid to experiment (in a new branch, of course!)

## 🆘 When All Else Fails
```bash
rm -rf repo-name
git clone https://github.com/username/repo-name.git
```
> The nuclear option - sometimes starting fresh is the best solution! 

---
Happy coding!

================
File: src/pages/posts/foundation-cache-saved/my-personal-rules-for-AI-IDE.mdx
================
---
layout: ../../../layouts/BlogPost.astro
title: "My Personal Rules for AI IDE"
description: "A guide to documenting comments for React and TypeScript code, featuring operator terminology, proper commenting practices, and TypeScript-specific documentation patterns"
pubDate: "2025-01-08"
heroImage: "https://images.unsplash.com/photo-1555066931-4365d14bab8c?auto=format&fit=crop&q=80"

import Gist from '@kotosha/astro-gist';
---

<Gist id="4aeccbe1dbaa7f89c182bd65d2764203">

# Comment Guide for AI Development with React and TypeScript

This is a comprehensive guide for AI tools to understand and generate proper comments in React and TypeScript projects. The guide includes operator terminology, documentation patterns, and best practices for code commenting.

```markdown

# I'm using Windows operating system and Powershell

#Please do NOT be lazy, if you suggest a fix of a file, rewrite the codes without truncation, do not use something like [existing]  [... Continue with more sections and images ...] or [... Continue with existing codes ...], etc.

# React & TypeScript Code Documentation Guide

Use these specific terms when commenting code to make documentation searchable and consistent.

## Operators & Expressions

### Conditional Operators

- `? :` - **Ternary Conditional Operator**
- `&&` - **Logical AND Operator** (short-circuit evaluation)
- `||` - **Logical OR Operator** (short-circuit evaluation)
- `??` - **Nullish Coalescing Operator**

### Optional Chaining

- `?.` - **Optional Chaining Operator**
- `!.` - **Non-null Assertion Operator**

### Type Operations

- `as` - **Type Assertion Operator**
- `instanceof` - **Instance Check Operator**
- `typeof` - **Type Check Operator**
- `keyof` - **Index Type Query Operator**

### String Operations

- `+` - **String Concatenation Operator**
- `` ` `` - **Template Literal**
- `${expression}` - **String Interpolation**

### Array Operations

- `...` - **Spread Operator**
- `.map()` - **Array Mapping Method**
- `.filter()` - **Array Filter Method**
- `.reduce()` - **Array Reduction Method**
- `.find()` - **Array Find Method**

### Object Operations

- `...` - **Object Spread Operator**
- `?.` - **Optional Property Access**
- `??=` - **Nullish Coalescing Assignment**

### React-Specific

- `<>` - **Fragment Shorthand**
- `React.Fragment` - **Fragment Component**
- `useState` - **State Hook**
- `useEffect` - **Effect Hook**
- `useMemo` - **Memoization Hook**
- `useCallback` - **Callback Memoization Hook**

### TypeScript-Specific

- `interface` - **Interface Declaration**
- `type` - **Type Alias**
- `extends` - **Type Extension**
- `implements` - **Interface Implementation**
- `&` - **Intersection Type Operator**
- `|` - **Union Type Operator**

## Example Usage in Comments

```typescript
// Using Nullish Coalescing Operator (??) for default value
const value = data ?? defaultValue;

// Using Optional Chaining Operator (?.) for safe property access
const userName = user?.profile?.name;

// Using Ternary Conditional Operator (? :) for conditional rendering
const element = isLoading ? <Loading /> : <Content />;

// Using Logical AND Operator (&&) for conditional rendering
{
  isVisible && <Component />;
}

// Using Template Literal (``) with String Interpolation (${})
const greeting = `Hello, ${userName}!`;

// Using Array Spread Operator (...) for array copying
const newArray = [...existingArray];

// Using Type Assertion Operator (as) for type casting
const element = event.target as HTMLInputElement;

// Using Union Type Operator (|) for multiple types
type Status = "loading" | "success" | "error";


## Style Guide for Comments

1. Be specific with operator names
2. Include both the symbol and the full operator name
3. Mention the purpose after the operator specification
4. Keep comments concise but descriptive

Example:

```typescript
// Ternary Operator (? :) - Conditionally assigns role based on admin status
const role = isAdmin ? "administrator" : "user";
```

================
File: src/pages/posts/lorem-ipsum/hello-world.md
================
---
layout: ../../../layouts/BlogPost.astro
title: "A Journey Through Nature's Wonders"
description: "An exploration of breathtaking landscapes and natural phenomena"
heroImage: "https://images.unsplash.com/photo-1519681393784-d120267933ba?q=80&w=2070"
pubDate: "2024-03-21"
tags: ["nature", "photography", "travel"]
---

# A Journey Through Nature's Wonders

![Mountain Aurora](https://images.unsplash.com/photo-1519681393784-d120267933ba?q=80&w=2070)
_Northern lights dancing over snow-capped mountains_

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit. Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum.

## The Majestic Mountains

![Alpine Lake](https://images.unsplash.com/photo-1506744038136-46273834b3fb?q=80&w=2070)
_Crystal clear alpine lake reflecting the surrounding peaks_

Proin dapibus tristique odio, ut gravida dolor mattis et. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus.

## Forest Depths

![Mystical Forest](https://images.unsplash.com/photo-1441974231531-c6227db76b6e?q=80&w=2070)
_Sunlight filtering through ancient forest canopy_

Nulla facilisi. Duis aliquet egestas purus in blandit. Curabitur vulputate, ligula lacinia scelerisque tempor, lacus lacus ornare ante, ac egestas est urna sit amet arcu. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed molestie augue sit amet leo consequat posuere.

### Hidden Waterfalls

![Cascading Waterfall](https://images.unsplash.com/photo-1432405972618-c60b0225b8f9?q=80&w=2070)
_Powerful cascades hidden in the wilderness_

Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Fusce id purus. Ut varius tincidunt libero. Phasellus dolor. Maecenas vestibulum mollis diam. Pellentesque ut neque.

## Desert Horizons

![Desert Sunset](https://images.unsplash.com/photo-1509316785289-025f5b846b35?q=80&w=2070)
_Golden hour painting the desert dunes_

Pellentesque dapibus hendrerit tortor. Praesent egestas tristique nibh. Sed a libero. Cras varius. Donec vitae orci sed dolor rutrum auctor. Fusce egestas elit eget lorem. Suspendisse nisl elit, rhoncus eget, elementum ac, condimentum eget, diam.

### Night Skies

![Milky Way](https://images.unsplash.com/photo-1470813740244-df37b8c1edcb?q=80&w=2070)
_The Milky Way arching over mountain peaks_

Morbi mattis ullamcorper velit. Phasellus gravida semper nisi. Nullam vel sem. Pellentesque libero tortor, tincidunt et, tincidunt eget, semper nec, quam. Sed hendrerit. Morbi ac felis. Nunc egestas, augue at pellentesque laoreet, felis eros vehicula leo, at malesuada velit leo quis pede.

## Coastal Dreams

![Ocean Waves](https://images.unsplash.com/photo-1439405326854-014607f694d7?q=80&w=2070)
_Powerful waves crashing against coastal cliffs_

Donec interdum, metus et hendrerit aliquet, dolor diam sagittis ligula, eget egestas libero turpis vel mi. Nunc nulla. Fusce risus nisl, viverra et, tempor et, pretium in, sapien. Donec venenatis vulputate lorem. Morbi nec metus.

### Tropical Paradise

![Tropical Beach](https://images.unsplash.com/photo-1506953823976-52e1fdc0149a?q=80&w=2070)
_Pristine beach with swaying palm trees_

Phasellus nec sem in justo pellentesque facilisis. Etiam imperdiet imperdiet orci. Nunc nec neque. Phasellus leo dolor, tempus non, auctor et, hendrerit quis, nisi. Curabitur ligula sapien, tincidunt non, euismod vitae, posuere imperdiet, leo. Maecenas malesuada.

## Final Thoughts

Praesent congue erat at massa. Sed cursus turpis vitae tortor. Donec posuere vulputate arcu. Phasellus accumsan cursus velit. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Sed aliquam, nisi quis porttitor congue, elit erat euismod orci, ac placerat dolor lectus quis orci.

![Mountain Range](https://images.unsplash.com/photo-1464822759023-fed622ff2c3b?q=80&w=2070)
_Endless mountain ranges stretching to the horizon_

Phasellus consectetuer vestibulum elit. Aenean tellus metus, bibendum sed, posuere ac, mattis non, nunc. Vestibulum fringilla pede sit amet augue. In turpis. Pellentesque posuere. Praesent turpis. Aenean posuere, tortor sed cursus feugiat, nunc augue blandit nunc, eu sollicitudin urna dolor sagittis lacus.

================
File: src/styles/global.css
================
/* Custom fonts first */
@font-face {
    font-family: 'Raleway';
    src: url('/fonts/raleway-regular.woff2') format('woff2');
    font-weight: 400;
    font-style: normal;
    font-display: swap;
}

/* Then Tailwind directives */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Add this at the top of your global.css */
html.no-flash {
    visibility: hidden;
}

/* Finally, custom styles */
@layer base {
    body {
        @apply bg-solarized-bg dark:bg-nightowl-bg text-solarized-fg dark:text-nightowl-fg;
        font-family: 'Raleway', -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial,
            sans-serif;
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
        overflow-wrap: break-word;
    }
}

@layer components {
    .prose {
        @apply max-w-none leading-normal;
        @apply text-solarized-fg dark:text-nightowl-fg;
    }

    .prose h1 {
        @apply text-4xl font-bold my-8;
        @apply text-solarized-fg dark:text-nightowl-fg;
    }

    .prose h2 {
        @apply text-3xl font-semibold my-6;
        @apply text-solarized-fg dark:text-nightowl-fg;
    }

    .prose h3 {
        @apply text-2xl font-semibold my-4;
        @apply text-solarized-fg dark:text-nightowl-fg;
    }

    .prose h4 {
        @apply text-xl font-semibold my-4;
        @apply text-solarized-fg dark:text-nightowl-fg;
    }

    .prose p {
        @apply my-6;
        @apply text-solarized-text dark:text-nightowl-text;
    }

    .prose img {
        @apply rounded-lg shadow-lg my-8 w-full object-cover max-h-[600px];
    }

    .prose img+em {
        @apply block text-center text-sm text-solarized-text dark:text-nightowl-text -mt-6 mb-8;
    }

    .prose a {
        @apply text-solarized-blue hover:text-solarized-accent dark:text-nightowl-blue dark:hover:text-nightowl-accent;
        text-decoration: underline;
        text-underline-offset: 2px;
    }

    .prose pre {
        @apply relative p-4 my-6 overflow-x-auto bg-solarized-secondary dark:bg-nightowl-secondary rounded-lg;
        @apply text-solarized-text dark:text-nightowl-text;
    }

    .prose pre code {
        @apply block p-0 overflow-visible bg-transparent border-0;
        @apply text-sm font-mono;
    }
}

================
File: src/styles/theme.ts
================
export const themes = {
    light: {
        // Light theme adjustments for better contrast and Material Theme alignment
        background: '#FAFAFA',      // Material Light theme background
        foreground: '#546E7A',      // Lighter variant for better contrast
        text: '#94A7B0',           // Adjusted for better readability
        selectionBg: '#80CBC440',   // Material selection with opacity
        selectionFg: '#546E7A',     // Matching foreground
        button: '#E7E7E7',         // Light variant button
        secondaryBg: '#F5F5F5',    // Slightly darker than background
        disabled: '#D2D4D5',       // Softer disabled state
        contrast: '#EEEEEE',       // Subtle contrast
        active: '#E1E1E1',        // Subtle active state
        border: '#E4E4E4',        // Subtle border
        highlight: '#80CBC4',      // Material teal for highlights
        accent: '#7E57C2',        // Material deep purple
        green: '#91B859',         // Material light green
        yellow: '#F6A434',        // Material amber
        blue: '#82AAFF',          // Keeping your blue
        red: '#E53935',          // Material red
        purple: '#7E57C2',       // Material deep purple
        orange: '#F76D47',       // Material deep orange
        cyan: '#39ADB5',         // Material cyan
        gray: '#8796B0'          // Adjusted gray
    },
    dark: {
        // Night Owl dark theme - refined with Material Theme influences
        background: '#011627',      // Night Owl background
        foreground: '#d6deeb',      // Night Owl foreground
        text: '#d6deeb',           // Changed to foreground color for better readability
        selectionBg: '#1F2A3F',    // Darker selection background
        selectionFg: '#FFFFFF',     // White selection text
        button: '#0b253a',         // Keep original
        secondaryBg: '#0b2942',    // Keep original
        disabled: '#697098',       // Keep original
        contrast: '#010e1a',       // Keep original
        active: '#13344F',         // Keep original
        border: '#122d42',         // Keep original
        highlight: '#084d81',      // Keep original
        accent: '#7e57c2',         // Material deep purple
        green: '#addb67',          // Night Owl green
        yellow: '#ecc48d',         // Night Owl yellow
        blue: '#82aaff',           // Night Owl blue
        red: '#ff6363',           // Night Owl red
        purple: '#c792ea',         // Night Owl purple
        orange: '#f78c6c',         // Night Owl orange
        cyan: '#7fdbca',          // Night Owl cyan
        gray: '#637777'           // Night Owl gray
    }
}

================
File: tailwind.config.cjs
================
/** @type {import('tailwindcss').Config} */
module.exports = {
	content: ['./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}'],
	darkMode: 'class',
	theme: {
	  extend: {
		colors: {
		  solarized: {
			// Light theme colors with Solarized values
			bg: '#fdf6e3',        // Base3 (background)
			fg: '#d35f06',        // Base03 (strong contrast)
			text: '#073642',      // Base02 (darker text for better contrast)
			button: '#d8d4c4',    // From your Solarized list
			accent: '#d33682',    // Magenta from Solarized
			blue: '#268bd2',      // Blue from Solarized
			yellow: '#b58900',    // Yellow from Solarized
			secondary: '#F6F0DE', // Second Background from your list
			border: '#edead9',    // Border from your list
			disabled: '#C9CCC3',  // Disabled from your list
			active: '#d1cbb8',    // Active from your list
			highlight: '#d1cbb8', // Highlight from your list
			green: '#859900',     // Green from Solarized
			red: '#dc322f',       // Red from Solarized
			purple: '#6c71c4',    // Violet from Solarized
			orange: '#cb4b16',    // Orange from Solarized
			cyan: '#2aa198',      // Cyan from Solarized
			gray: '#657b83',       // Base00 from Solarized (darker gray for better contrast)
			category: "#011627"
		  },
		  nightowl: {
			// Night Owl dark theme colors (unchanged)
			bg: '#011627',        
			fg: '#f78c6c',        
			text: '#d6deeb',      
			button: '#0b253a',    
			accent: '#7e57c2',    
			blue: '#82aaff',      
			yellow: '#ecc48d',    
			secondary: '#0b2942', 
			border: '#122d42',    
			disabled: '#697098',  
			active: '#13344f',    
			highlight: '#084d81', 
			green: '#addb67',     
			red: '#ff6363',       
			purple: '#c792ea',    
			orange: '#f78c6c',    
			cyan: '#7fdbca',      
			gray: '#637777',
			category: "#fdf6e3"       
		  }
		},
		fontFamily: {
		  sans: [
			'Raleway',
			'-apple-system',
			'BlinkMacSystemFont',
			'Segoe UI',
			'Helvetica',
			'Arial',
			'sans-serif'
		  ]
		}
	  }
	},
	plugins: [
	  require('@tailwindcss/typography')
	]
  }

================
File: tsconfig.json
================
{
  "extends": "astro/tsconfigs/strict",
  "compilerOptions": {
    "jsx": "react-jsx",
    "jsxImportSource": "react"
  }
}
